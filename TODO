Open tasks for jarsync, in order of importance:

  * Finish implementing file-based methods.

  * Implement the file reconstruction methods.

  * Finalize the library's API.

  * Build environments. Make sure that 'make' and 'ant' run well across
    platforms.

  * Kill the last remaining bugs in the checksum search.

  * General stress-testing and bug-fixing (once this is done the
    library should go to version 1.0).

  * Implement a client and a server that are compatible with the
    current C implementation of rsync, and/or invent our own protocol to
    make things easier on ourselves.

  * Rsync (the C program) uses UNIX-dependant file modes; how do
    we get around this in Java? Filesystem support in Java's standard
    library is lackluster at best, so what's to do?  Fake it? Native
    implementations?

  * Implement a mechanism for syncing remote Java Objects. This will
    probably make use of serialized data, but this depends upon how
    well the algorithm can be appied to serialized objects.

  * Clean up and improve the code.

For the `rdiff' tool:

  * Implement the -I, -O options. I think this has to do with librsync's
    "tube", and thus doesn't apply here. On a related note, perhaps
    Jarsync needs its own "tube" for buffered output?

  * Implement the -z, -i options. Since these aren't implemented in
    librsync yet there's no big rush, and besides, we have no idea how
    these options SHOULD be implemented (compress entire file, compress
    LITERAL commands, what?).

  * Implement the --paranoid option.

  * Assert compatibility.

  * librsync's rdiff encodes long LITERAL deltas in chunks, ie a single
    long LITERAL is split into smaller ones. Is this a feature, or a
    by-product of the tube?

=======================================================================
  $Id: TODO,v 1.3 2002/08/21 20:43:14 rsdio Exp $
